----- ./srcs/.env -----
# MariaDB Configuration
MARIA_DB_ROOT_USER=bananaman
MARIA_DB_ROOT_PASSWORD=banana
MARIA_DB_DATABASE_NAME=wordpress

# WordPress Admin Configuration
WORDPRESS_ADMIN_USER=bananaman
WORDPRESS_ADMIN_PASSWORD=banana
WORDPRESS_ADMIN_EMAIL=bananaman@banana.de

# WordPress Test User Configuration
WORDPRESS_TEST_USER=${USER}
WORDPRESS_TEST_USER_PASSWORD=${USER}
WORDPRESS_TEST_USER_EMAIL=${USER}@bananasareepic.de

# Domain configuration for NGINX TLS
DOMAIN_NAME=fschuber.42.fr
-e 

----- ./srcs/docker-compose.yml -----
version: '3.8'

services:
  nginx:
    build: "./requirements/nginx"
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - ./web:/var/www/html
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    depends_on:
      - wordpress
      - mariadb
    networks:
      - inception
    restart: always

  wordpress:
    build: "./requirements/wordpress"
    container_name: wp-php
    volumes:
      - ./web:/var/www/html
    environment:
      - MARIA_DB_ROOT_USER=${MARIA_DB_ROOT_USER}
      - MARIA_DB_ROOT_PASSWORD=${MARIA_DB_ROOT_PASSWORD}
      - MARIA_DB_DATABASE_NAME=${MARIA_DB_DATABASE_NAME}
      - WORDPRESS_ADMIN_USER=${WORDPRESS_ADMIN_USER}
      - WORDPRESS_ADMIN_PASSWORD=${WORDPRESS_ADMIN_PASSWORD}
      - WORDPRESS_ADMIN_EMAIL=${WORDPRESS_ADMIN_EMAIL}
      - WORDPRESS_TEST_USER=${WORDPRESS_TEST_USER}
      - WORDPRESS_TEST_USER_PASSWORD=${WORDPRESS_TEST_USER_PASSWORD}
      - WORDPRESS_TEST_USER_EMAIL=${WORDPRESS_TEST_USER_EMAIL}
    depends_on:
      - mariadb
    networks:
      - inception
    restart: always

  mariadb:
    build: "./requirements/mariadb"
    container_name: mariadb
    volumes:
      - ./db:/var/lib/mysql
    environment:
      - MARIA_DB_ROOT_USER=${MARIA_DB_ROOT_USER}
      - MARIA_DB_ROOT_PASSWORD=${MARIA_DB_ROOT_PASSWORD}
      - MARIA_DB_DATABASE_NAME=${MARIA_DB_DATABASE_NAME}
    networks:
      - inception
    restart: always

networks:
  inception:
-e 

----- ./srcs/example.env -----
# MariaDB Configuration
MARIA_DB_ROOT_USER=
MARIA_DB_ROOT_PASSWORD=
MARIA_DB_DATABASE_NAME=

# WordPress Admin Configuration
WORDPRESS_ADMIN_USER=
WORDPRESS_ADMIN_PASSWORD=
WORDPRESS_ADMIN_EMAIL=

# WordPress Test User Configuration
WORDPRESS_TEST_USER=
WORDPRESS_TEST_USER_PASSWORD=
WORDPRESS_TEST_USER_EMAIL=

# Domain configuration for NGINX TLS
DOMAIN_NAME=
-e 

----- ./srcs/requirements/mariadb/50-server.cnf -----
# The following is the default configuration file for Mariadb with modifications
# at /etc/mysql/mariadb.conf.d/50-server.cnf
# comments have been removed for brevity

[server]

init_file = /etc/mysql/init.sql # call custom init script on startup

[mysqld]

user                    = root # usually runs on mysql user for security purposes
pid-file                = /run/mysqld/mysqld.pid
basedir                 = /usr
datadir                 = /var/lib/mysql # sets specific data storage folder
tmpdir                  = /tmp # sets temp data folder

bind-address            = 0.0.0.0 # listen everywhere
expire_logs_days        = 10

character-set-server  = utf8mb4
collation-server      = utf8mb4_general_ci

[embedded]

[mariadb]

[mariadb-10.11]
-e 

----- ./srcs/requirements/mariadb/Dockerfile -----
FROM debian:bullseye

# mariadb is the sql database implementation, used by wordpress for storage
# we need to create /run/mysqld directory for mariadb to run there
# gettext-base is used by start_mariadb.sh for env var substitution

RUN apt update && apt upgrade -y && \
	apt install -y mariadb-server \
	gettext-base

COPY 50-server.cnf /etc/mysql/mariadb.conf.d/50-server.cnf
COPY init.sql /etc/mysql/init.sql

COPY start_mariadb.sh /start_mariadb.sh
RUN chmod +x /start_mariadb.sh

RUN mkdir /run/mysqld

CMD ["/start_mariadb.sh"]
-e 

----- ./srcs/requirements/mariadb/init.sql -----
CREATE DATABASE IF NOT EXISTS ${MARIA_DB_DATABASE_NAME};
CREATE USER '${MARIA_DB_ROOT_USER}'@'%' IDENTIFIED BY '${MARIA_DB_ROOT_PASSWORD}';
GRANT ALL PRIVILEGES ON ${MARIA_DB_DATABASE_NAME}.* TO '${MARIA_DB_ROOT_USER}'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;

-- % is used as a wildcard so ${MARIA_DB_ROOT_USER} can connect from any host
-- wordpress.* means all tables in the wordpress database
-- FLUSH PRIVILEGES reloads the grant tables in memory to apply the changes
-e 

----- ./srcs/requirements/mariadb/start_mariadb.sh -----
#!/bin/bash

set -e # Immediately exit if any command has a non-zero exit status.

envsubst < /etc/mysql/init.sql > /tmp/init_substituted.sql
mv /tmp/init_substituted.sql /etc/mysql/init.sql

exec mysqld_safe
-e 

----- ./srcs/requirements/nginx/default -----
# The following is the default configuration file for Nginx with modifications
# at /etc/nginx/sites-available/default
# comments have been removed for brevity
# ssl behind listen communicates that nginx should use the SSL protocol

server {
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name ${DOMAIN_NAME};

	# SSL Configuration
	ssl_certificate /etc/nginx/ssl/nginx.crt;
	ssl_certificate_key /etc/nginx/ssl/nginx.key;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers HIGH:!aNULL:!MD5;

	root /var/www/html;
	index index.php index.html index.htm index.nginx-debian.html; # index.php has priority

	location / {
		try_files $uri $uri/ =404;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;

		fastcgi_pass wp-php:9000; # Send php requests to the php container
	}
}
-e 

----- ./srcs/requirements/nginx/Dockerfile -----
FROM debian:bullseye

# nginx is the webserver, handling incoming requests and using cgi
# it will forward php requests to wordpress / php-fpm as specified in the copied config
# openssl is used to generate the ssl certificate

RUN apt update && apt upgrade -y && apt install -y nginx openssl gettext-base

# Create directory for SSL certificates
RUN mkdir -p /etc/nginx/ssl && \
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
	-subj "/C=GB/ST=England/L=London/O=Inception/OU=IT Department/CN=${DOMAIN_NAME}" \
	-keyout /etc/nginx/ssl/nginx.key \
	-out /etc/nginx/ssl/nginx.crt

COPY default /etc/nginx/sites-available/default
COPY envsubstitution.sh /envsubstitution.sh
RUN chmod +x /envsubstitution.sh

CMD ["/envsubstitution.sh"]
-e 

----- ./srcs/requirements/nginx/envsubstitution.sh -----
#!/bin/bash

set -e # Immediately exit if any command has a non-zero exit status.

envsubst < /etc/nginx/sites-available/default > /etc/nginx/sites-available/default1
mv /etc/nginx/sites-available/default1 /etc/nginx/sites-available/default

exec nginx -g 'daemon off;'
-e 

----- ./srcs/requirements/wordpress/Dockerfile -----
FROM debian:bullseye

# php-fpm will handle php script execution as requested by the web server
# it will listen on the right port as specified in the copied over config file
# php-mysqli is a php extension that allows php to interact with mysql databases & curl is used to get WordPress install files

RUN apt update && apt upgrade -y && \
	apt install -y php7.4-fpm php-mysqli curl && \
	mkdir -p /run/php

COPY www.conf /etc/php/7.4/fpm/pool.d/www.conf
COPY install-wp.sh /install-wp.sh
RUN chmod +x /install-wp.sh

CMD ["/install-wp.sh"]
-e 

----- ./srcs/requirements/wordpress/install-wp.sh -----
#!/bin/bash

cd /var/www/html
# download wordpress command line interface to download & manage wordpress
curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod +x wp-cli.phar
./wp-cli.phar core download \
			--allow-root
./wp-cli.phar config create \
			--dbname=${MARIA_DB_DATABASE_NAME} \
			--dbuser=${MARIA_DB_ROOT_USER} \
			--dbpass=${MARIA_DB_ROOT_PASSWORD} \
			--dbhost=mariadb \
			--allow-root
./wp-cli.phar core install \
			--url=localhost \
			--title=inception \
			--admin_user=${WORDPRESS_ADMIN_USER} \
			--admin_password=${WORDPRESS_ADMIN_PASSWORD} \
			--admin_email=${WORDPRESS_ADMIN_EMAIL} \
			--allow-root
./wp-cli.phar user create "${WORDPRESS_TEST_USER}" "${WORDPRESS_TEST_USER_EMAIL}" \
			--role=author \
			--user_pass="${WORDPRESS_TEST_USER_PASSWORD}" \
			--allow-root

php-fpm7.4 -F
-e 

----- ./srcs/requirements/wordpress/www.conf -----
[www]

; The following is the default configuration file for PHP-FPM with modifications
; at /etc/php/8.2/fpm/pool.d/www.conf
; comments have been removed for brevity

user = www-data
group = www-data

; listen to localhost at port 9000
listen = wp-php:9000

listen.owner = www-data
listen.group = www-data

pm = dynamic

pm.max_children = 5

pm.start_servers = 2

pm.min_spare_servers = 1

pm.max_spare_servers = 3
-e 

